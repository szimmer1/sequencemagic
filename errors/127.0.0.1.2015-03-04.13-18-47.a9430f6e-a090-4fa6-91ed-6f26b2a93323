(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'manually'"
p3
sS'layer'
p4
S'/home/jack/web2py/applications/sequencemagic/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\n\ndef index():\n   \n   """Set response menu"""\n   ctrl = \'index\'\n   authorized = False\n   if request.args(0) is not None:\n       ctrl = \'myindex\'\n       if request.args(0) != \'None\':\n           p = db(db.descriptor_table.creating_user_id == request.args(0)).select()\n           for row in p:\n               if row.creating_user_id == auth.user_id:\n                   authorized = True  \n       else:\n           session.flash = T("You need to login!")\n    \n   \n       \n\n       \n       # determine in authorized is true or false\n   #response.menu = setResponseMenu(\'index\', True)\n   response.menu = setResponseMenu(ctrl, authorized)\n\n   # TODO: conditional authorization for viewing "My sequences"\n\n   user = all_descriptors = None\n\n   """If passed arg (user id), shows only user\'s sequences (requires auth). Else, shows all sequences"""\n\n   # seqList = db(db.descriptor_to_user.user_id == auth.user_id).select(orderby=db.descriptor_table.seq_id)\n   user = auth.user\n   all_descriptors = db().select(db.descriptor_table.ALL) # For now, return all descriptors in the DB\n   query = None\n   if authorized: #only showing the sequences you created and that you are subscribed without the edit button\n       #all_descriptors = db(db.descriptor_table.creating_user_id == request.args(0)).select(db.descriptor_table.ALL)\n       query = db(db.descriptor_to_user.user_id == request.args(0)).select(db.descriptor_to_user.descriptor_id)\n       #query is to get all the sequence_id subscribed to the user_id\n       \n   if all_descriptors is None:\n      session.flash = T("You have no sequences!")\n   \n  \n   \n   return locals()\n\n@auth.requires_login()\ndef subscribe():\n    update_descriptor_to_user(request.args(0))\n    redirect(URL(\'default\', \'index\'))    \n    \n    \ndef view():\n   """Set response menu"""\n   \n   response.menu = setResponseMenu(\'view\', False)\n   \n   """\n   Allows a user to visualize a particular sequence with it\'s annotations,\n   if any are present. Requires seq they want to see to be passed via URL,\n   as in sequencemagic/view/:descriptor_id\n   """\n   annotationList = seq = desc_name = desc_description = date_created = desc_author = None\n\n   desc_id = request.args(0) or None\n   if desc_id is None:\n       # no descriptor id given\n       return locals()\n\n   desc_row = db(db.descriptor_table.id == desc_id).select().first()\n   user_row = db(db.auth_user.id == desc_row.creating_user_id).select().first()\n\n   desc_author = user_row.first_name + " " + user_row.last_name\n   desc_name = desc_row.sequence_name\n   desc_description = desc_row.sequence_description\n   date_created = desc_row.date_created\n   seq_id = desc_row.seq_id\n\n   seq = db(db.sequences.id == seq_id).select().first().seq\n   if seq_id is None or seq is None:\n       # sequence doesn\'t exist\n       return locals()\n\n   # annotationList = db(db.annotations.descriptor_id == seqID).select().annotation_name\n   return locals()\n\n@auth.requires_login()\ndef upload():\n    """Set response menu"""\n    response.menu = setResponseMenu(\'upload\', True)\n\t# categories provides the supported sequence file formats\n    categories = [\'Plain Sequence\', \'FASTA\'] \n    form = SQLFORM.factory(\n        Field(\'name\', label=\'Sequence name\', required=True),\n\t\t#Field(\'seqs\', \'text\', requires=IS_NOT_EMPTY()),\n\t\tField(\'file_type\',label ="File Type",  requires = IS_IN_SET(categories)),\n        Field(\'sequence_file\', \'upload\'),\n        Field(\'description\', \'text\')\n    )\n    form.add_button(\'Manually Enter Sequence\', URL(\'index\', args =[\'man\']))\n\n    if form.process().accepted:\n        session.flash = T("Your form was accepted")\n        insert = insert_sequence(form)\n        descriptor_id = insert[\'desc_id\'] #<-- defined in the models\n        update_descriptor_to_user(insert[\'seq_id\'])\n        redirect(URL(\'default\', \'index\'))\n        \n     #redirect(URL(\'default\', \'view\', vars=dict(sequenceid=seq_id))\n        \n    else:\n        pass\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jack/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/jack/web2py/applications/sequencemagic/controllers/default.py", line 175, in <module>\n  File "/home/jack/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jack/web2py/applications/sequencemagic/controllers/default.py", line 21, in index\n    p = db(db.descriptor_table.creating_user_id == request.args(0)).select()\n  File "/home/jack/web2py/gluon/dal.py", line 10749, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/jack/web2py/gluon/dal.py", line 2472, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/jack/web2py/gluon/dal.py", line 1868, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/jack/web2py/gluon/dal.py", line 1767, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/jack/web2py/gluon/dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "/home/jack/web2py/gluon/dal.py", line 1440, in EQ\n    self.expand(second, first.type))\n  File "/home/jack/web2py/gluon/dal.py", line 1555, in expand\n    return str(self.represent(expression, field_type))\n  File "/home/jack/web2py/gluon/dal.py", line 2012, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'manually\'\n'
p11
s.